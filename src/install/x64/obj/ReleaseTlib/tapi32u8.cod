; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0DM@KHOPIHP@?$EA?$CI?$CD?$CJCopyright?5?$CIC?$CJ?51996?92016?5H?4Sh@ ; `string'
EXTRN	__imp_GetDriveTypeW:PROC
EXTRN	__imp_ModifyMenuW:PROC
EXTRN	__imp_GetOpenFileNameW:PROC
EXTRN	__imp_PlaySoundW:PROC
EXTRN	__imp_WideCharToMultiByte:PROC
EXTRN	__imp_GetSaveFileNameW:PROC
EXTRN	__imp_GetWindowsDirectoryW:PROC
EXTRN	__imp_SetCurrentDirectoryW:PROC
EXTRN	__imp_GetCurrentDirectoryW:PROC
EXTRN	__imp_GetFileInformationByHandle:PROC
EXTRN	__imp_MultiByteToWideChar:PROC
EXTRN	__imp_SetFileAttributesW:PROC
EXTRN	__imp_GetMenuStringW:PROC
EXTRN	__imp_CreateFileW:PROC
EXTRN	__imp_FindWindowW:PROC
EXTRN	__imp_InsertMenuW:PROC
EXTRN	__imp_AppendMenuW:PROC
EXTRN	__imp_RemoveDirectoryW:PROC
EXTRN	__imp_FindNextFileW:PROC
EXTRN	__imp_FindFirstFileW:PROC
EXTRN	__imp_DragQueryFileW:PROC
;	COMDAT ??_C@_0DM@KHOPIHP@?$EA?$CI?$CD?$CJCopyright?5?$CIC?$CJ?51996?92016?5H?4Sh@
CONST	SEGMENT
??_C@_0DM@KHOPIHP@?$EA?$CI?$CD?$CJCopyright?5?$CIC?$CJ?51996?92016?5H?4Sh@ DB '@'
	DB	'(#)Copyright (C) 1996-2016 H.Shirouzu', 09H, 09H, 'tap32u8.cp'
	DB	'p', 09H, 'Ver0.99', 00H			; `string'
PUBLIC	?WtoA@@YAHPEB_WPEADHH@Z				; WtoA
PUBLIC	?U8toW@@YAHPEBDPEA_WHH@Z			; U8toW
PUBLIC	?WtoU8@@YAHPEB_WPEADHH@Z			; WtoU8
PUBLIC	?AtoW@@YAHPEBDPEA_WHH@Z				; AtoW
PUBLIC	?AtoW@@YAPEA_WPEBDH@Z				; AtoW
PUBLIC	?WtoA@@YAPEADPEB_WH@Z				; WtoA
PUBLIC	?AtoWs@@YAPEA_WPEBDH@Z				; AtoWs
PUBLIC	?U8toW@@YAPEA_WPEBDH@Z				; U8toW
PUBLIC	?WtoAs@@YAPEADPEB_WH@Z				; WtoAs
;	COMDAT ?wbuf@?1??AtoWs@@YAPEA_WPEBDH@Z@4PAPEA_WA
_BSS	SEGMENT
?wbuf@?1??AtoWs@@YAPEA_WPEBDH@Z@4PAPEA_WA DQ 08H DUP (?) ; `AtoWs'::`2'::wbuf
_BSS	ENDS
;	COMDAT ?buf@?1??WtoAs@@YAPEADPEB_WH@Z@4PAPEADA
_BSS	SEGMENT
?buf@?1??WtoAs@@YAPEADPEB_WH@Z@4PAPEADA DQ 08H DUP (?)	; `WtoAs'::`2'::buf
_BSS	ENDS
;	COMDAT ?idx@?1??WtoAs@@YAPEADPEB_WH@Z@4KA
_BSS	SEGMENT
?idx@?1??WtoAs@@YAPEADPEB_WH@Z@4KA DD 01H DUP (?)	; `WtoAs'::`2'::idx
_BSS	ENDS
;	COMDAT ?idx@?1??AtoWs@@YAPEA_WPEBDH@Z@4KA
_BSS	SEGMENT
?idx@?1??AtoWs@@YAPEA_WPEBDH@Z@4KA DD 01H DUP (?)	; `AtoWs'::`2'::idx
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?WtoA@@YAHPEB_WPEADHH@Z DD imagerel $LN17
	DD	imagerel $LN17+287
	DD	imagerel $unwind$?WtoA@@YAHPEB_WPEADHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?U8toW@@YAHPEBDPEA_WHH@Z DD imagerel $LN17
	DD	imagerel $LN17+195
	DD	imagerel $unwind$?U8toW@@YAHPEBDPEA_WHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?WtoU8@@YAHPEB_WPEADHH@Z DD imagerel $LN17
	DD	imagerel $LN17+293
	DD	imagerel $unwind$?WtoU8@@YAHPEB_WPEADHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AtoW@@YAHPEBDPEA_WHH@Z DD imagerel $LN17
	DD	imagerel $LN17+192
	DD	imagerel $unwind$?AtoW@@YAHPEBDPEA_WHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AtoW@@YAPEA_WPEBDH@Z DD imagerel $LN6
	DD	imagerel $LN6+45
	DD	imagerel $unwind$?AtoW@@YAPEA_WPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?AtoW@@YAPEA_WPEBDH@Z DD imagerel $LN6+45
	DD	imagerel $LN6+101
	DD	imagerel $chain$0$?AtoW@@YAPEA_WPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?AtoW@@YAPEA_WPEBDH@Z DD imagerel $LN6+101
	DD	imagerel $LN6+114
	DD	imagerel $chain$1$?AtoW@@YAPEA_WPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?WtoA@@YAPEADPEB_WH@Z DD imagerel $LN6
	DD	imagerel $LN6+33
	DD	imagerel $unwind$?WtoA@@YAPEADPEB_WH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?WtoA@@YAPEADPEB_WH@Z DD imagerel $LN6+33
	DD	imagerel $LN6+79
	DD	imagerel $chain$0$?WtoA@@YAPEADPEB_WH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?WtoA@@YAPEADPEB_WH@Z DD imagerel $LN6+79
	DD	imagerel $LN6+92
	DD	imagerel $chain$1$?WtoA@@YAPEADPEB_WH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AtoWs@@YAPEA_WPEBDH@Z DD imagerel $LN5
	DD	imagerel $LN5+79
	DD	imagerel $unwind$?AtoWs@@YAPEA_WPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?U8toW@@YAPEA_WPEBDH@Z DD imagerel $LN6
	DD	imagerel $LN6+45
	DD	imagerel $unwind$?U8toW@@YAPEA_WPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?U8toW@@YAPEA_WPEBDH@Z DD imagerel $LN6+45
	DD	imagerel $LN6+101
	DD	imagerel $chain$0$?U8toW@@YAPEA_WPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?U8toW@@YAPEA_WPEBDH@Z DD imagerel $LN6+101
	DD	imagerel $LN6+114
	DD	imagerel $chain$1$?U8toW@@YAPEA_WPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?WtoAs@@YAPEADPEB_WH@Z DD imagerel $LN5
	DD	imagerel $LN5+79
	DD	imagerel $unwind$?WtoAs@@YAPEADPEB_WH@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$?WtoAs@@YAPEADPEB_WH@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?U8toW@@YAPEA_WPEBDH@Z DD 021H
	DD	imagerel $LN6
	DD	imagerel $LN6+45
	DD	imagerel $unwind$?U8toW@@YAPEA_WPEBDH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?U8toW@@YAPEA_WPEBDH@Z DD 020521H
	DD	063405H
	DD	imagerel $LN6
	DD	imagerel $LN6+45
	DD	imagerel $unwind$?U8toW@@YAPEA_WPEBDH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?U8toW@@YAPEA_WPEBDH@Z DD 040a01H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AtoWs@@YAPEA_WPEBDH@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?WtoA@@YAPEADPEB_WH@Z DD 021H
	DD	imagerel $LN6
	DD	imagerel $LN6+33
	DD	imagerel $unwind$?WtoA@@YAPEADPEB_WH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?WtoA@@YAPEADPEB_WH@Z DD 020521H
	DD	063405H
	DD	imagerel $LN6
	DD	imagerel $LN6+33
	DD	imagerel $unwind$?WtoA@@YAPEADPEB_WH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?WtoA@@YAPEADPEB_WH@Z DD 040a01H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?AtoW@@YAPEA_WPEBDH@Z DD 021H
	DD	imagerel $LN6
	DD	imagerel $LN6+45
	DD	imagerel $unwind$?AtoW@@YAPEA_WPEBDH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?AtoW@@YAPEA_WPEBDH@Z DD 020521H
	DD	063405H
	DD	imagerel $LN6
	DD	imagerel $LN6+45
	DD	imagerel $unwind$?AtoW@@YAPEA_WPEBDH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AtoW@@YAPEA_WPEBDH@Z DD 040a01H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AtoW@@YAHPEBDPEA_WHH@Z DD 084101H
	DD	086441H
	DD	0a540fH
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?WtoU8@@YAHPEB_WPEADHH@Z DD 0a4b01H
	DD	0be44bH
	DD	0a6441H
	DD	0d540fH
	DD	0c340fH
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?U8toW@@YAHPEBDPEA_WHH@Z DD 084101H
	DD	086441H
	DD	0a540fH
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?WtoA@@YAHPEB_WPEADHH@Z DD 0a4901H
	DD	0be449H
	DD	0a6441H
	DD	0d540fH
	DD	0c340fH
	DD	0700b720fH
; Function compile flags: /Ogtpy
; File f:\software1\系统软件\fastcopy\fastcopy325src\src\tlib\tapi32u8.cpp
;	COMDAT ?WtoAs@@YAPEADPEB_WH@Z
_TEXT	SEGMENT
src$ = 48
max_len$dead$ = 56
?WtoAs@@YAPEADPEB_WH@Z PROC				; WtoAs, COMDAT

; 651  : char *WtoAs(const WCHAR *src, int max_len) {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 652  : 	static	char	*buf[MAX_STATIC_ARRAY];
; 653  : 	static	u_long	idx;
; 654  : 
; 655  : 	char	*&cur_buf = buf[idx++ % MAX_STATIC_ARRAY];

  0000a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?idx@?1??WtoAs@@YAPEADPEB_WH@Z@4KA
  00010	48 8b f9	 mov	 rdi, rcx
  00013	8b c2		 mov	 eax, edx
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?buf@?1??WtoAs@@YAPEADPEB_WH@Z@4PAPEADA
  0001c	83 e0 07	 and	 eax, 7
  0001f	ff c2		 inc	 edx
  00021	89 15 00 00 00
	00		 mov	 DWORD PTR ?idx@?1??WtoAs@@YAPEADPEB_WH@Z@4KA, edx
  00027	48 8d 1c c1	 lea	 rbx, QWORD PTR [rcx+rax*8]

; 656  : 	if (cur_buf) {

  0002b	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0002f	48 85 c9	 test	 rcx, rcx
  00032	74 05		 je	 SHORT $LN2@WtoAs

; 657  : 		delete [] cur_buf;

  00034	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN2@WtoAs:

; 658  : 	}
; 659  : 	return	(cur_buf = WtoA(src, max_len));

  00039	48 8b cf	 mov	 rcx, rdi
  0003c	e8 00 00 00 00	 call	 ?WtoA@@YAPEADPEB_WH@Z	; WtoA
  00041	48 89 03	 mov	 QWORD PTR [rbx], rax

; 660  : }

  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
?WtoAs@@YAPEADPEB_WH@Z ENDP				; WtoAs
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File f:\software1\系统软件\fastcopy\fastcopy325src\src\tlib\tapi32u8.cpp
;	COMDAT ?U8toW@@YAPEA_WPEBDH@Z
_TEXT	SEGMENT
src$ = 48
max_len$dead$ = 56
?U8toW@@YAPEA_WPEBDH@Z PROC				; U8toW, COMDAT

; 552  : WCHAR *U8toW(const char *src, int max_len) {

$LN6:
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 553  : 	WCHAR	*wbuf = NULL;
; 554  : 	int		len = U8toW(src, NULL, 0, max_len) + 1;

  0000a	45 33 c0	 xor	 r8d, r8d
  0000d	33 d2		 xor	 edx, edx
  0000f	48 8b f1	 mov	 rsi, rcx
  00012	e8 00 00 00 00	 call	 ?U8toW@@YAHPEBDPEA_WHH@Z ; U8toW
  00017	8d 78 01	 lea	 edi, DWORD PTR [rax+1]

; 555  : 
; 556  : 	if (len > 0) {

  0001a	85 ff		 test	 edi, edi
  0001c	7e 47		 jle	 SHORT $LN4@U8toW

; 557  : 		wbuf = new WCHAR [len];

  0001e	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00025	48 63 d7	 movsxd	 rdx, edi
  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00032	48 f7 e2	 mul	 rdx
  00035	48 0f 40 c1	 cmovo	 rax, rcx
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]

; 558  : 		U8toW(src, wbuf, len, max_len);

  00041	44 8b c7	 mov	 r8d, edi
  00044	48 8b d0	 mov	 rdx, rax
  00047	48 8b ce	 mov	 rcx, rsi
  0004a	48 8b d8	 mov	 rbx, rax
  0004d	e8 00 00 00 00	 call	 ?U8toW@@YAHPEBDPEA_WHH@Z ; U8toW

; 559  : 	}
; 560  : 	return	wbuf;

  00052	48 8b c3	 mov	 rax, rbx
  00055	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 561  : }

  0005a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
$LN4@U8toW:

; 559  : 	}
; 560  : 	return	wbuf;

  00065	33 c0		 xor	 eax, eax

; 561  : }

  00067	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
?U8toW@@YAPEA_WPEBDH@Z ENDP				; U8toW
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File f:\software1\系统软件\fastcopy\fastcopy325src\src\tlib\tapi32u8.cpp
;	COMDAT ?AtoWs@@YAPEA_WPEBDH@Z
_TEXT	SEGMENT
src$ = 48
max_len$dead$ = 56
?AtoWs@@YAPEA_WPEBDH@Z PROC				; AtoWs, COMDAT

; 629  : WCHAR *AtoWs(const char *src, int max_len) {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 630  : 	static	WCHAR	*wbuf[MAX_STATIC_ARRAY];
; 631  : 	static	u_long	idx;
; 632  : 
; 633  : 	WCHAR	*&cur_buf = wbuf[idx++ % MAX_STATIC_ARRAY];

  0000a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?idx@?1??AtoWs@@YAPEA_WPEBDH@Z@4KA
  00010	48 8b f9	 mov	 rdi, rcx
  00013	8b c2		 mov	 eax, edx
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?wbuf@?1??AtoWs@@YAPEA_WPEBDH@Z@4PAPEA_WA
  0001c	83 e0 07	 and	 eax, 7
  0001f	ff c2		 inc	 edx
  00021	89 15 00 00 00
	00		 mov	 DWORD PTR ?idx@?1??AtoWs@@YAPEA_WPEBDH@Z@4KA, edx
  00027	48 8d 1c c1	 lea	 rbx, QWORD PTR [rcx+rax*8]

; 634  : 	if (cur_buf) {

  0002b	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0002f	48 85 c9	 test	 rcx, rcx
  00032	74 05		 je	 SHORT $LN2@AtoWs

; 635  : 		delete [] cur_buf;

  00034	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN2@AtoWs:

; 636  : 	}
; 637  : 	return	(cur_buf = AtoW(src, max_len));

  00039	48 8b cf	 mov	 rcx, rdi
  0003c	e8 00 00 00 00	 call	 ?AtoW@@YAPEA_WPEBDH@Z	; AtoW
  00041	48 89 03	 mov	 QWORD PTR [rbx], rax

; 638  : }

  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
?AtoWs@@YAPEA_WPEBDH@Z ENDP				; AtoWs
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File f:\software1\系统软件\fastcopy\fastcopy325src\src\tlib\tapi32u8.cpp
;	COMDAT ?WtoA@@YAPEADPEB_WH@Z
_TEXT	SEGMENT
src$ = 48
max_len$dead$ = 56
?WtoA@@YAPEADPEB_WH@Z PROC				; WtoA, COMDAT

; 640  : char *WtoA(const WCHAR *src, int max_len) {

$LN6:
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 641  : 	char	*buf = NULL;
; 642  : 	int		len	  = WtoA(src, NULL, 0, max_len) + 1;

  0000a	45 33 c0	 xor	 r8d, r8d
  0000d	33 d2		 xor	 edx, edx
  0000f	48 8b f1	 mov	 rsi, rcx
  00012	e8 00 00 00 00	 call	 ?WtoA@@YAHPEB_WPEADHH@Z	; WtoA
  00017	8d 78 01	 lea	 edi, DWORD PTR [rax+1]

; 643  : 
; 644  : 	if (len > 0) {

  0001a	85 ff		 test	 edi, edi
  0001c	7e 31		 jle	 SHORT $LN4@WtoA

; 645  : 		buf = new char [len];

  0001e	48 63 cf	 movsxd	 rcx, edi
  00021	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00026	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]

; 646  : 		WtoA(src, buf, len, max_len);

  0002b	44 8b c7	 mov	 r8d, edi
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 8b ce	 mov	 rcx, rsi
  00034	48 8b d8	 mov	 rbx, rax
  00037	e8 00 00 00 00	 call	 ?WtoA@@YAHPEB_WPEADHH@Z	; WtoA

; 647  : 	}
; 648  : 	return	buf;

  0003c	48 8b c3	 mov	 rax, rbx
  0003f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 649  : }

  00044	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
$LN4@WtoA:

; 647  : 	}
; 648  : 	return	buf;

  0004f	33 c0		 xor	 eax, eax

; 649  : }

  00051	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00056	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
?WtoA@@YAPEADPEB_WH@Z ENDP				; WtoA
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File f:\software1\系统软件\fastcopy\fastcopy325src\src\tlib\tapi32u8.cpp
;	COMDAT ?AtoW@@YAPEA_WPEBDH@Z
_TEXT	SEGMENT
src$ = 48
max_len$dead$ = 56
?AtoW@@YAPEA_WPEBDH@Z PROC				; AtoW, COMDAT

; 618  : WCHAR *AtoW(const char *src, int max_len) {

$LN6:
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 619  : 	WCHAR	*wbuf = NULL;
; 620  : 	int		len	  = AtoW(src, NULL, 0, max_len) + 1;

  0000a	45 33 c0	 xor	 r8d, r8d
  0000d	33 d2		 xor	 edx, edx
  0000f	48 8b f1	 mov	 rsi, rcx
  00012	e8 00 00 00 00	 call	 ?AtoW@@YAHPEBDPEA_WHH@Z	; AtoW
  00017	8d 78 01	 lea	 edi, DWORD PTR [rax+1]

; 621  : 
; 622  : 	if (len > 0) {

  0001a	85 ff		 test	 edi, edi
  0001c	7e 47		 jle	 SHORT $LN4@AtoW

; 623  : 		wbuf = new WCHAR [len];

  0001e	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00025	48 63 d7	 movsxd	 rdx, edi
  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00032	48 f7 e2	 mul	 rdx
  00035	48 0f 40 c1	 cmovo	 rax, rcx
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]

; 624  : 		AtoW(src, wbuf, len, max_len);

  00041	44 8b c7	 mov	 r8d, edi
  00044	48 8b d0	 mov	 rdx, rax
  00047	48 8b ce	 mov	 rcx, rsi
  0004a	48 8b d8	 mov	 rbx, rax
  0004d	e8 00 00 00 00	 call	 ?AtoW@@YAHPEBDPEA_WHH@Z	; AtoW

; 625  : 	}
; 626  : 	return	wbuf;

  00052	48 8b c3	 mov	 rax, rbx
  00055	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 627  : }

  0005a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
$LN4@AtoW:

; 625  : 	}
; 626  : 	return	wbuf;

  00065	33 c0		 xor	 eax, eax

; 627  : }

  00067	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
?AtoW@@YAPEA_WPEBDH@Z ENDP				; AtoW
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File f:\software1\系统软件\fastcopy\fastcopy325src\src\tlib\tapi32u8.cpp
;	COMDAT ?AtoW@@YAHPEBDPEA_WHH@Z
_TEXT	SEGMENT
src$ = 64
dst$ = 72
bufsize$ = 80
max_len$dead$ = 88
?AtoW@@YAHPEBDPEA_WHH@Z PROC				; AtoW, COMDAT

; 487  : {

$LN17:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 488  : 	if (bufsize >= 1) {

  0000f	33 ed		 xor	 ebp, ebp
  00011	41 8b f8	 mov	 edi, r8d
  00014	48 8b da	 mov	 rbx, rdx
  00017	41 83 f8 01	 cmp	 r8d, 1
  0001b	7c 1f		 jl	 SHORT $LN4@AtoW

; 489  : 		if (dst) {

  0001d	48 85 d2	 test	 rdx, rdx
  00020	74 03		 je	 SHORT $LN3@AtoW

; 490  : 			*dst = 0;

  00022	66 89 2a	 mov	 WORD PTR [rdx], bp
$LN3@AtoW:

; 491  : 		}
; 492  : 		if (bufsize == 1) {

  00025	83 ff 01	 cmp	 edi, 1
  00028	75 12		 jne	 SHORT $LN4@AtoW

; 493  : 			return	0;

  0002a	33 c0		 xor	 eax, eax

; 515  : }

  0002c	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00031	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00036	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN4@AtoW:
  0003c	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00041	85 ff		 test	 edi, edi
  00043	41 8d 70 ff	 lea	 esi, DWORD PTR [r8-1]

; 494  : 		}
; 495  : 	}
; 496  : 
; 497  : 	int affect_len = bufsize ? bufsize - 1 : 0;
; 498  : 	int len = ::MultiByteToWideChar(CP_ACP, 0, src, max_len, dst, affect_len);

  00047	4c 8b c1	 mov	 r8, rcx
  0004a	0f 44 f5	 cmove	 esi, ebp
  0004d	41 83 c9 ff	 or	 r9d, -1
  00051	89 74 24 28	 mov	 DWORD PTR [rsp+40], esi
  00055	33 d2		 xor	 edx, edx
  00057	33 c9		 xor	 ecx, ecx
  00059	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MultiByteToWideChar
  00064	48 63 d0	 movsxd	 rdx, eax

; 499  : 
; 500  : 	if (dst && bufsize > 0 && max_len != 0) {

  00067	48 85 db	 test	 rbx, rbx
  0006a	74 3d		 je	 SHORT $LN11@AtoW
  0006c	85 ff		 test	 edi, edi
  0006e	7e 39		 jle	 SHORT $LN11@AtoW

; 501  : 		if (len == 0) {

  00070	85 c0		 test	 eax, eax
  00072	75 1b		 jne	 SHORT $LN6@AtoW

; 502  : 			if ((len = (int)wcsnlen(dst, affect_len)) == affect_len) {

  00074	48 63 d6	 movsxd	 rdx, esi
  00077	48 8b cb	 mov	 rcx, rbx
  0007a	e8 00 00 00 00	 call	 wcsnlen
  0007f	48 8b d0	 mov	 rdx, rax
  00082	3b c6		 cmp	 eax, esi
  00084	75 23		 jne	 SHORT $LN11@AtoW

; 503  : 				dst[len] = 0;

  00086	48 63 c8	 movsxd	 rcx, eax
  00089	66 89 2c 4b	 mov	 WORD PTR [rbx+rcx*2], bp

; 504  : 			}
; 505  : 		}

  0008d	eb 1a		 jmp	 SHORT $LN11@AtoW
$LN6@AtoW:

; 506  : 		else if (dst[len-1] == 0) {

  0008f	8d 4a ff	 lea	 ecx, DWORD PTR [rdx-1]
  00092	48 63 c1	 movsxd	 rax, ecx
  00095	66 39 2c 43	 cmp	 WORD PTR [rbx+rax*2], bp
  00099	75 04		 jne	 SHORT $LN9@AtoW

; 507  : 			len--;

  0009b	8b d1		 mov	 edx, ecx
  0009d	eb 0a		 jmp	 SHORT $LN11@AtoW
$LN9@AtoW:

; 508  : 		}
; 509  : 		else if (dst[len]) {

  0009f	66 39 2c 53	 cmp	 WORD PTR [rbx+rdx*2], bp
  000a3	74 04		 je	 SHORT $LN11@AtoW

; 510  : 			dst[len] = 0;

  000a5	66 89 2c 53	 mov	 WORD PTR [rbx+rdx*2], bp
$LN11@AtoW:
  000a9	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 511  : 		}
; 512  : 	}
; 513  : 
; 514  : 	return	len;

  000ae	8b c2		 mov	 eax, edx

; 515  : }

  000b0	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000b5	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000ba	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000be	5f		 pop	 rdi
  000bf	c3		 ret	 0
?AtoW@@YAHPEBDPEA_WHH@Z ENDP				; AtoW
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File f:\software1\系统软件\fastcopy\fastcopy325src\src\tlib\tapi32u8.cpp
;	COMDAT ?WtoU8@@YAHPEB_WPEADHH@Z
_TEXT	SEGMENT
src$ = 80
dst$ = 88
bufsize$ = 96
max_len$dead$ = 104
?WtoU8@@YAHPEB_WPEADHH@Z PROC				; WtoU8, COMDAT

; 422  : {

$LN17:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	49 63 f8	 movsxd	 rdi, r8d
  00012	48 8b da	 mov	 rbx, rdx
  00015	48 8b e9	 mov	 rbp, rcx

; 423  : 	if (bufsize >= 1) {

  00018	83 ff 01	 cmp	 edi, 1
  0001b	7c 1f		 jl	 SHORT $LN4@WtoU8

; 424  : 		if (dst) {

  0001d	48 85 d2	 test	 rdx, rdx
  00020	74 03		 je	 SHORT $LN3@WtoU8

; 425  : 			*dst = 0;

  00022	c6 02 00	 mov	 BYTE PTR [rdx], 0
$LN3@WtoU8:

; 426  : 		}
; 427  : 		if (bufsize == 1) {

  00025	83 ff 01	 cmp	 edi, 1
  00028	75 12		 jne	 SHORT $LN4@WtoU8

; 428  : 			return	0;

  0002a	33 c0		 xor	 eax, eax

; 453  : }

  0002c	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00031	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00036	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN4@WtoU8:
  0003c	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi

; 429  : 		}
; 430  : 	}
; 431  : 
; 432  : 	int affect_len = bufsize ? bufsize - 1 : 0;
; 433  : 	int len = ::WideCharToMultiByte(CP_UTF8, 0, src, max_len, dst, affect_len, 0, 0);

  00041	b9 e9 fd 00 00	 mov	 ecx, 65001		; 0000fde9H
  00046	4c 89 74 24 58	 mov	 QWORD PTR [rsp+88], r14
  0004b	8d 77 ff	 lea	 esi, DWORD PTR [rdi-1]
  0004e	45 33 f6	 xor	 r14d, r14d
  00051	45 85 c0	 test	 r8d, r8d
  00054	4c 89 74 24 38	 mov	 QWORD PTR [rsp+56], r14
  00059	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  0005e	4c 8b c5	 mov	 r8, rbp
  00061	41 0f 44 f6	 cmove	 esi, r14d
  00065	41 83 c9 ff	 or	 r9d, -1
  00069	89 74 24 28	 mov	 DWORD PTR [rsp+40], esi
  0006d	33 d2		 xor	 edx, edx
  0006f	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WideCharToMultiByte
  0007a	48 63 d0	 movsxd	 rdx, eax

; 434  : 
; 435  : 	if (dst && bufsize > 0 && max_len != 0) {

  0007d	48 85 db	 test	 rbx, rbx
  00080	0f 84 83 00 00
	00		 je	 $LN11@WtoU8
  00086	85 ff		 test	 edi, edi
  00088	7e 7f		 jle	 SHORT $LN11@WtoU8

; 436  : 		if (len == 0) {

  0008a	85 c0		 test	 eax, eax
  0008c	75 61		 jne	 SHORT $LN6@WtoU8

; 437  : 			int	min_len = min(4, bufsize);

  0008e	b9 04 00 00 00	 mov	 ecx, 4
  00093	8b c7		 mov	 eax, edi
  00095	3b f9		 cmp	 edi, ecx
  00097	0f 4f c1	 cmovg	 eax, ecx

; 438  : 			memset(dst + bufsize - min_len, 0, min_len);

  0009a	48 8b cf	 mov	 rcx, rdi
  0009d	4c 63 c0	 movsxd	 r8, eax
  000a0	33 d2		 xor	 edx, edx
  000a2	49 2b c8	 sub	 rcx, r8
  000a5	48 03 cb	 add	 rcx, rbx
  000a8	e8 00 00 00 00	 call	 memset

; 439  : 
; 440  : 			::WideCharToMultiByte(CP_UTF8, 0, src, max_len, dst, affect_len, 0, 0);

  000ad	4c 89 74 24 38	 mov	 QWORD PTR [rsp+56], r14
  000b2	41 83 c9 ff	 or	 r9d, -1
  000b6	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  000bb	4c 8b c5	 mov	 r8, rbp
  000be	89 74 24 28	 mov	 DWORD PTR [rsp+40], esi
  000c2	33 d2		 xor	 edx, edx
  000c4	b9 e9 fd 00 00	 mov	 ecx, 65001		; 0000fde9H
  000c9	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WideCharToMultiByte

; 441  : 			if ((len = (int)strnlen(dst, affect_len)) == affect_len) {

  000d4	48 63 d6	 movsxd	 rdx, esi
  000d7	48 8b cb	 mov	 rcx, rbx
  000da	e8 00 00 00 00	 call	 strnlen
  000df	48 8b d0	 mov	 rdx, rax
  000e2	3b c6		 cmp	 eax, esi
  000e4	75 23		 jne	 SHORT $LN11@WtoU8

; 442  : 				dst[len] = 0;

  000e6	48 63 c8	 movsxd	 rcx, eax
  000e9	44 88 34 19	 mov	 BYTE PTR [rcx+rbx], r14b

; 443  : 			}
; 444  : 		}

  000ed	eb 1a		 jmp	 SHORT $LN11@WtoU8
$LN6@WtoU8:

; 445  : 		else if (dst[len-1] == 0) {

  000ef	8d 4a ff	 lea	 ecx, DWORD PTR [rdx-1]
  000f2	48 63 c1	 movsxd	 rax, ecx
  000f5	44 38 34 18	 cmp	 BYTE PTR [rax+rbx], r14b
  000f9	75 04		 jne	 SHORT $LN9@WtoU8

; 446  : 			len--;

  000fb	8b d1		 mov	 edx, ecx
  000fd	eb 0a		 jmp	 SHORT $LN11@WtoU8
$LN9@WtoU8:

; 447  : 		}
; 448  : 		else if (dst[len]) {

  000ff	44 38 34 1a	 cmp	 BYTE PTR [rdx+rbx], r14b
  00103	74 04		 je	 SHORT $LN11@WtoU8

; 449  : 			dst[len] = 0;

  00105	44 88 34 1a	 mov	 BYTE PTR [rdx+rbx], r14b
$LN11@WtoU8:
  00109	4c 8b 74 24 58	 mov	 r14, QWORD PTR [rsp+88]

; 450  : 		}
; 451  : 	}
; 452  : 	return	len;

  0010e	8b c2		 mov	 eax, edx
  00110	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 453  : }

  00115	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0011a	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0011f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00123	5f		 pop	 rdi
  00124	c3		 ret	 0
?WtoU8@@YAHPEB_WPEADHH@Z ENDP				; WtoU8
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File f:\software1\系统软件\fastcopy\fastcopy325src\src\tlib\tapi32u8.cpp
;	COMDAT ?U8toW@@YAHPEBDPEA_WHH@Z
_TEXT	SEGMENT
src$ = 64
dst$ = 72
bufsize$ = 80
max_len$dead$ = 88
?U8toW@@YAHPEBDPEA_WHH@Z PROC				; U8toW, COMDAT

; 456  : {

$LN17:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 457  : 	if (bufsize >= 1) {

  0000f	33 ed		 xor	 ebp, ebp
  00011	41 8b f8	 mov	 edi, r8d
  00014	48 8b da	 mov	 rbx, rdx
  00017	41 83 f8 01	 cmp	 r8d, 1
  0001b	7c 1f		 jl	 SHORT $LN4@U8toW

; 458  : 		if (dst) {

  0001d	48 85 d2	 test	 rdx, rdx
  00020	74 03		 je	 SHORT $LN3@U8toW

; 459  : 			*dst = 0;

  00022	66 89 2a	 mov	 WORD PTR [rdx], bp
$LN3@U8toW:

; 460  : 		}
; 461  : 		if (bufsize == 1) {

  00025	83 ff 01	 cmp	 edi, 1
  00028	75 12		 jne	 SHORT $LN4@U8toW

; 462  : 			return	0;

  0002a	33 c0		 xor	 eax, eax

; 484  : }

  0002c	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00031	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00036	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN4@U8toW:
  0003c	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00041	85 ff		 test	 edi, edi
  00043	41 8d 70 ff	 lea	 esi, DWORD PTR [r8-1]

; 463  : 		}
; 464  : 	}
; 465  : 
; 466  : 	int affect_len = bufsize ? bufsize - 1 : 0;
; 467  : 	int len = ::MultiByteToWideChar(CP_UTF8, 0, src, max_len, dst, affect_len);

  00047	4c 8b c1	 mov	 r8, rcx
  0004a	0f 44 f5	 cmove	 esi, ebp
  0004d	b9 e9 fd 00 00	 mov	 ecx, 65001		; 0000fde9H
  00052	89 74 24 28	 mov	 DWORD PTR [rsp+40], esi
  00056	41 83 c9 ff	 or	 r9d, -1
  0005a	33 d2		 xor	 edx, edx
  0005c	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MultiByteToWideChar
  00067	48 63 d0	 movsxd	 rdx, eax

; 468  : 
; 469  : 	if (dst && bufsize > 0 && max_len != 0) {

  0006a	48 85 db	 test	 rbx, rbx
  0006d	74 3d		 je	 SHORT $LN11@U8toW
  0006f	85 ff		 test	 edi, edi
  00071	7e 39		 jle	 SHORT $LN11@U8toW

; 470  : 		if (len == 0) {

  00073	85 c0		 test	 eax, eax
  00075	75 1b		 jne	 SHORT $LN6@U8toW

; 471  : 			if ((len = (int)wcsnlen(dst, affect_len)) == affect_len) {

  00077	48 63 d6	 movsxd	 rdx, esi
  0007a	48 8b cb	 mov	 rcx, rbx
  0007d	e8 00 00 00 00	 call	 wcsnlen
  00082	48 8b d0	 mov	 rdx, rax
  00085	3b c6		 cmp	 eax, esi
  00087	75 23		 jne	 SHORT $LN11@U8toW

; 472  : 				dst[len] = 0;

  00089	48 63 c8	 movsxd	 rcx, eax
  0008c	66 89 2c 4b	 mov	 WORD PTR [rbx+rcx*2], bp

; 473  : 			}
; 474  : 		}

  00090	eb 1a		 jmp	 SHORT $LN11@U8toW
$LN6@U8toW:

; 475  : 		else if (dst[len-1] == 0) {

  00092	8d 4a ff	 lea	 ecx, DWORD PTR [rdx-1]
  00095	48 63 c1	 movsxd	 rax, ecx
  00098	66 39 2c 43	 cmp	 WORD PTR [rbx+rax*2], bp
  0009c	75 04		 jne	 SHORT $LN9@U8toW

; 476  : 			len--;

  0009e	8b d1		 mov	 edx, ecx
  000a0	eb 0a		 jmp	 SHORT $LN11@U8toW
$LN9@U8toW:

; 477  : 		}
; 478  : 		else if (dst[len]) {

  000a2	66 39 2c 53	 cmp	 WORD PTR [rbx+rdx*2], bp
  000a6	74 04		 je	 SHORT $LN11@U8toW

; 479  : 			dst[len] = 0;

  000a8	66 89 2c 53	 mov	 WORD PTR [rbx+rdx*2], bp
$LN11@U8toW:
  000ac	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 480  : 		}
; 481  : 	}
; 482  : 
; 483  : 	return	len;

  000b1	8b c2		 mov	 eax, edx

; 484  : }

  000b3	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000b8	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000bd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c1	5f		 pop	 rdi
  000c2	c3		 ret	 0
?U8toW@@YAHPEBDPEA_WHH@Z ENDP				; U8toW
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File f:\software1\系统软件\fastcopy\fastcopy325src\src\tlib\tapi32u8.cpp
;	COMDAT ?WtoA@@YAHPEB_WPEADHH@Z
_TEXT	SEGMENT
src$ = 80
dst$ = 88
bufsize$ = 96
max_len$dead$ = 104
?WtoA@@YAHPEB_WPEADHH@Z PROC				; WtoA, COMDAT

; 518  : {

$LN17:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	49 63 f8	 movsxd	 rdi, r8d
  00012	48 8b da	 mov	 rbx, rdx
  00015	48 8b e9	 mov	 rbp, rcx

; 519  : 	if (bufsize >= 1) {

  00018	83 ff 01	 cmp	 edi, 1
  0001b	7c 1f		 jl	 SHORT $LN4@WtoA

; 520  : 		if (dst) {

  0001d	48 85 d2	 test	 rdx, rdx
  00020	74 03		 je	 SHORT $LN3@WtoA

; 521  : 			*dst = 0;

  00022	c6 02 00	 mov	 BYTE PTR [rdx], 0
$LN3@WtoA:

; 522  : 		}
; 523  : 		if (bufsize == 1) {

  00025	83 ff 01	 cmp	 edi, 1
  00028	75 12		 jne	 SHORT $LN4@WtoA

; 524  : 			return	0;

  0002a	33 c0		 xor	 eax, eax

; 550  : }

  0002c	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00031	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00036	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN4@WtoA:
  0003c	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00041	8d 77 ff	 lea	 esi, DWORD PTR [rdi-1]
  00044	4c 89 74 24 58	 mov	 QWORD PTR [rsp+88], r14
  00049	45 33 f6	 xor	 r14d, r14d
  0004c	45 85 c0	 test	 r8d, r8d

; 525  : 		}
; 526  : 	}
; 527  : 
; 528  : 	int affect_len = bufsize ? bufsize - 1 : 0;
; 529  : 	int len = ::WideCharToMultiByte(CP_ACP, 0, src, max_len, dst, affect_len, 0, 0);

  0004f	4c 89 74 24 38	 mov	 QWORD PTR [rsp+56], r14
  00054	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  00059	4c 8b c5	 mov	 r8, rbp
  0005c	41 0f 44 f6	 cmove	 esi, r14d
  00060	41 83 c9 ff	 or	 r9d, -1
  00064	89 74 24 28	 mov	 DWORD PTR [rsp+40], esi
  00068	33 d2		 xor	 edx, edx
  0006a	33 c9		 xor	 ecx, ecx
  0006c	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WideCharToMultiByte
  00077	48 63 d0	 movsxd	 rdx, eax

; 530  : 
; 531  : 	if (dst && bufsize > 0 && max_len != 0) {

  0007a	48 85 db	 test	 rbx, rbx
  0007d	0f 84 80 00 00
	00		 je	 $LN11@WtoA
  00083	85 ff		 test	 edi, edi
  00085	7e 7c		 jle	 SHORT $LN11@WtoA

; 532  : 		if (len == 0) {

  00087	85 c0		 test	 eax, eax
  00089	75 5e		 jne	 SHORT $LN6@WtoA

; 533  : 			int	min_len = min(2, bufsize);

  0008b	b9 02 00 00 00	 mov	 ecx, 2
  00090	8b c7		 mov	 eax, edi
  00092	3b f9		 cmp	 edi, ecx
  00094	0f 4f c1	 cmovg	 eax, ecx

; 534  : 			memset(dst + bufsize - min_len, 0, min_len);

  00097	48 8b cf	 mov	 rcx, rdi
  0009a	4c 63 c0	 movsxd	 r8, eax
  0009d	33 d2		 xor	 edx, edx
  0009f	49 2b c8	 sub	 rcx, r8
  000a2	48 03 cb	 add	 rcx, rbx
  000a5	e8 00 00 00 00	 call	 memset

; 535  : 
; 536  : 			::WideCharToMultiByte(CP_ACP, 0, src, max_len, dst, affect_len, 0, 0);

  000aa	4c 89 74 24 38	 mov	 QWORD PTR [rsp+56], r14
  000af	41 83 c9 ff	 or	 r9d, -1
  000b3	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  000b8	4c 8b c5	 mov	 r8, rbp
  000bb	89 74 24 28	 mov	 DWORD PTR [rsp+40], esi
  000bf	33 d2		 xor	 edx, edx
  000c1	33 c9		 xor	 ecx, ecx
  000c3	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WideCharToMultiByte

; 537  : 			if ((len = (int)strnlen(dst, affect_len)) == affect_len) {

  000ce	48 63 d6	 movsxd	 rdx, esi
  000d1	48 8b cb	 mov	 rcx, rbx
  000d4	e8 00 00 00 00	 call	 strnlen
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	3b c6		 cmp	 eax, esi
  000de	75 23		 jne	 SHORT $LN11@WtoA

; 538  : 				dst[len] = 0;

  000e0	48 63 c8	 movsxd	 rcx, eax
  000e3	44 88 34 19	 mov	 BYTE PTR [rcx+rbx], r14b

; 539  : 			}
; 540  : 		}

  000e7	eb 1a		 jmp	 SHORT $LN11@WtoA
$LN6@WtoA:

; 541  : 		else if (dst[len-1] == 0) {

  000e9	8d 4a ff	 lea	 ecx, DWORD PTR [rdx-1]
  000ec	48 63 c1	 movsxd	 rax, ecx
  000ef	44 38 34 18	 cmp	 BYTE PTR [rax+rbx], r14b
  000f3	75 04		 jne	 SHORT $LN9@WtoA

; 542  : 			len--;

  000f5	8b d1		 mov	 edx, ecx
  000f7	eb 0a		 jmp	 SHORT $LN11@WtoA
$LN9@WtoA:

; 543  : 		}
; 544  : 		else if (dst[len]) {

  000f9	44 38 34 1a	 cmp	 BYTE PTR [rdx+rbx], r14b
  000fd	74 04		 je	 SHORT $LN11@WtoA

; 545  : 			dst[len] = 0;

  000ff	44 88 34 1a	 mov	 BYTE PTR [rdx+rbx], r14b
$LN11@WtoA:
  00103	4c 8b 74 24 58	 mov	 r14, QWORD PTR [rsp+88]

; 546  : 		}
; 547  : 	}
; 548  : 
; 549  : 	return	len;

  00108	8b c2		 mov	 eax, edx
  0010a	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 550  : }

  0010f	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00114	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00119	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0011d	5f		 pop	 rdi
  0011e	c3		 ret	 0
?WtoA@@YAHPEB_WPEADHH@Z ENDP				; WtoA
_TEXT	ENDS
END
